// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: proto/activity.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActivityServiceClient is the client API for ActivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityServiceClient interface {
	GetActivities(ctx context.Context, in *ActivityRequest, opts ...grpc.CallOption) (ActivityService_GetActivitiesClient, error)
}

type activityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityServiceClient(cc grpc.ClientConnInterface) ActivityServiceClient {
	return &activityServiceClient{cc}
}

func (c *activityServiceClient) GetActivities(ctx context.Context, in *ActivityRequest, opts ...grpc.CallOption) (ActivityService_GetActivitiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActivityService_ServiceDesc.Streams[0], "/activities.ActivityService/GetActivities", opts...)
	if err != nil {
		return nil, err
	}
	x := &activityServiceGetActivitiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActivityService_GetActivitiesClient interface {
	Recv() (*ActivityResponse, error)
	grpc.ClientStream
}

type activityServiceGetActivitiesClient struct {
	grpc.ClientStream
}

func (x *activityServiceGetActivitiesClient) Recv() (*ActivityResponse, error) {
	m := new(ActivityResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActivityServiceServer is the server API for ActivityService service.
// All implementations must embed UnimplementedActivityServiceServer
// for forward compatibility
type ActivityServiceServer interface {
	GetActivities(*ActivityRequest, ActivityService_GetActivitiesServer) error
	mustEmbedUnimplementedActivityServiceServer()
}

// UnimplementedActivityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActivityServiceServer struct {
}

func (UnimplementedActivityServiceServer) GetActivities(*ActivityRequest, ActivityService_GetActivitiesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetActivities not implemented")
}
func (UnimplementedActivityServiceServer) mustEmbedUnimplementedActivityServiceServer() {}

// UnsafeActivityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityServiceServer will
// result in compilation errors.
type UnsafeActivityServiceServer interface {
	mustEmbedUnimplementedActivityServiceServer()
}

func RegisterActivityServiceServer(s grpc.ServiceRegistrar, srv ActivityServiceServer) {
	s.RegisterService(&ActivityService_ServiceDesc, srv)
}

func _ActivityService_GetActivities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActivityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActivityServiceServer).GetActivities(m, &activityServiceGetActivitiesServer{stream})
}

type ActivityService_GetActivitiesServer interface {
	Send(*ActivityResponse) error
	grpc.ServerStream
}

type activityServiceGetActivitiesServer struct {
	grpc.ServerStream
}

func (x *activityServiceGetActivitiesServer) Send(m *ActivityResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ActivityService_ServiceDesc is the grpc.ServiceDesc for ActivityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activities.ActivityService",
	HandlerType: (*ActivityServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetActivities",
			Handler:       _ActivityService_GetActivities_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/activity.proto",
}
